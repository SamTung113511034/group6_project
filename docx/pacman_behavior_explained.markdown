# Pac-Man 行為與路徑尋找機制詳解

## 什麼是 Pac-Man 的行為樹？

行為樹（Behavior Tree）是一種像流程圖的結構，用來控制 Pac-Man 的決策。想像它是一個「決策清單」，Pac-Man 會按順序檢查清單上的條件，然後根據情況選擇做什麼。行為樹由不同的「節點」組成，每個節點負責檢查一個條件或執行一個動作。這些節點像積木一樣組合起來，形成完整的決策邏輯。

行為樹的好處是它讓 Pac-Man 的行為有條理、容易調整，而且能應對複雜的遊戲情況，比如躲避鬼魂、追逐能量球或吃分數球。

---

## 行為樹的結構和工作原理

Pac-Man 的行為樹是一個「選擇節點」（Selector Node），它包含六個「序列節點」（Sequence Node），每個序列節點代表一種優先級不同的策略。選擇節點會從第一個序列開始檢查，依次嘗試，直到某個策略成功執行或所有策略都失敗。以下是行為樹的六個策略，按優先級從高到低排列：

1. **如果有即時威脅（鬼魂距離 ≤ 1 格），則逃跑。**
2. **如果附近有威脅（鬼魂距離 < 6 格）且有能量球，則追尋能量球。**
3. **如果是末尾階段（剩餘分數球 ≤ 10），優先選擇較近的能量球或分數球。**
4. **如果有可食用鬼魂（距離 < 10 格且可食用時間 > 3 秒），則追逐鬼魂。**
5. **如果有分數球，則追尋分數球。**
6. **如果卡住（無法移動），執行隨機安全移動。**

每個序列節點由「條件節點」（Condition Node）和「動作節點」（Action Node）組成：
- **條件節點**：檢查某個條件是否成立（例如「有沒有鬼魂在附近？」），如果成立就繼續執行序列中的下一個節點，如果不成立就跳出這個序列。
- **動作節點**：執行具體的動作（例如「向能量球移動」），並返回是否成功。

**簡單比喻**：行為樹就像你在餐廳點餐的流程。你先看菜單上的第一項（比如牛排），如果有牛排且你有錢買，就點牛排；如果沒有牛排或錢不夠，就看下一項（雞肉），依此類推。如果所有菜都點不了，就隨便選個安全選項（比如沙拉）。

---

### 行為樹的決策流程

以下是每個策略的詳細解釋，幫助你理解 Pac-Man 如何「思考」：

#### 策略 1：即時威脅 → 逃跑
- **條件**：檢查是否有鬼魂在 1 格的距離內（上下左右的格子），且這個鬼魂不是「可食用」（可以被吃掉）、不是「正在返回重生點」或「等待中」。
- **動作**：如果有這樣的鬼魂，Pac-Man 會選擇一個「最安全」的方向逃跑。具體怎麼選方向，後面會講到（見「路徑尋找機制」）。
- **為什麼優先**：這是最緊急的情況，因為鬼魂太近可能會立刻撞到 Pac-Man，導致損失一條命。
- **比喻**：你在公園散步，突然看到一隻兇狗離你只有一步遠，你會馬上轉身跑，找一條安全的路逃開。

#### 策略 2：附近威脅且有能量球 → 追尋能量球
- **條件**：
  1. 有鬼魂在 6 格以內（用直線距離計算），且鬼魂不是可食用、正在返回重生點或等待中。
  2. 地圖上還有能量球（Power Pellet）。
- **動作**：Pac-Man 會朝最近的能量球移動，因為吃到能量球可以讓鬼魂變成可食用狀態，化解威脅。
- **為什麼重要**：鬼魂在附近時，能量球是反敗為勝的關鍵，Pac-Man 優先去找它來扭轉局面。
- **比喻**：你看到兇狗在不遠處，但公園裡有根棍子（能量球），你會先跑去拿棍子，因為拿了棍子狗就不敢靠近了。

#### 策略 3：末尾階段 → 優先能量球或分數球
- **條件**：地圖上剩餘的分數球（Score Pellet）少於或等於 10 個，意味著遊戲接近尾聲。
- **動作**：
  - 檢查能量球的平均距離是否比分數球的平均距離近。
  - 如果能量球更近，移動到最近的能量球。
  - 否則，移動到最近的分數球。
- **為什麼需要**：遊戲末尾時，分數球很少，Pac-Man 需要高效清場。能量球可能幫助躲避鬼魂，所以有時優先。
- **比喻**：你在公園撿蘋果（分數球），只剩幾個時，你會先看哪個蘋果近，或者有沒有能嚇跑狗的棍子（能量球）更近，然後去撿。

#### 策略 4：有可食用鬼魂 → 追逐鬼魂
- **條件**：有鬼魂是可食用的（被能量球影響），且：
  - 距離 Pac-Man 小於 10 格。
  - 鬼魂的可食用時間還有超過 3 秒（避免追到一半鬼魂恢復）。
  - 鬼魂不是正在返回重生點或等待中。
- **動作**：Pac-Man 會追向最近的可食用鬼魂，試圖吃掉它以獲得高分。
- **為什麼這樣做**：吃可食用鬼魂能大幅增加分數，是進攻的好機會。
- **比喻**：你拿了棍子後，狗變得害怕（可食用），你會追著它跑，因為現在你能「打敗」它，還能拿獎勵。

#### 策略 5：有分數球 → 追尋分數球
- **條件**：地圖上還有分數球。
- **動作**：Pac-Man 會移動到最近的分數球。
- **為什麼這樣做**：分數球是遊戲的主要目標，正常情況下 Pac-Man 的任務就是吃它們。
- **比喻**：沒狗威脅，也沒棍子或害怕的狗，你就專心撿公園裡的蘋果（分數球），挑最近的開始。

#### 策略 6：卡住 → 隨機安全移動
- **條件**：Pac-Man 被「卡住」，即連續一段時間（超過最大卡住幀數）無法有效移動。
- **動作**：隨機選擇一個安全的方向（不會撞牆、邊界、門或鬼魂重生點）移動。
- **為什麼需要**：這是保底策略，防止 Pac-Man 在某些情況下（如被鬼魂堵住）完全無法行動。
- **比喻**：你在公園走著走著發現前面全是圍欄，沒路可走，你就隨便挑個能走的方向，試著脫困。

---

## 行為樹的執行過程

1. Pac-Man 每一步（每幀）都會運行行為樹，從第一個策略開始檢查。
2. 每個策略的條件節點會先檢查是否滿足條件：
   - 如果滿足，執行對應的動作節點，然後結束這一輪決策。
   - 如果不滿足，跳到下一個策略。
3. 如果所有策略都失敗（例如沒有分數球、沒卡住等），Pac-Man 會執行隨機安全移動作為備用方案。
4. 行為樹的結果會告訴 Pac-Man 往哪個方向走（例如「向上」或「向右」），然後 Pac-Man 會試著朝那個方向移動。

**簡單比喻**：Pac-Man 像個聰明的機器人，拿著一份「待辦清單」，按順序檢查：「有沒有兇狗？有沒有棍子？遊戲快結束了嗎？」然後根據情況決定下一步怎麼走。

---

## 路徑尋找機制：A* 算法

行為樹決定了 Pac-Man 要做什麼（例如「追能量球」或「逃跑」），但具體怎麼走到目標點，靠的是 **A* 路徑尋找算法**。A* 算法是一個聰明的導航系統，能幫 Pac-Man 在迷宮中找到從當前位置到目標位置的最佳路徑，同時考慮鬼魂的威脅和其他因素。

### A* 算法是什麼？

A* 算法是一種尋找最短路徑的方法，廣泛用於遊戲和導航。它會：
- 從起點（Pac-Man 當前位置）開始，探索四周的格子。
- 計算每個格子的「成本」，選擇成本最低的路徑。
- 最終找到一條到目標的路徑（如果存在的話）。

**簡單比喻**：想像你在迷宮裡找寶藏，A* 算法像一個超聰明的指南針，告訴你哪條路最近，還會提醒你「這條路有怪獸，繞開它！」

---

### A\* 算法的工作原理

A\* 算法用以下幾個要素來決定路徑：

1. **起點和終點**：
   - 起點是 Pac-Man 當前所在的格子 (x, y)。
   - 終點（目標）根據行為樹的策略決定，例如：
     - 能量球的位置（追能量球時）。
     - 分數球的位置（追分數球時）。
     - 可食用鬼魂的位置（追鬼魂時）。
     - 一個遠離鬼魂的安全點（逃跑時）。

2. **成本計算**：
   A* 算法為每個格子計算兩種成本：
   - **G 成本**：從起點走到當前格子的實際代價，包括：
     - 基本移動成本（每走一格加 1）。
     - **鬼魂威脅成本**：如果格子靠近鬼魂（距離 < 4 格），成本會大幅增加（距離越近，成本越高）。這讓 Pac-Man 避開危險。
     - **能量球懲罰**：如果目標是分數球，靠近能量球的格子會加 1000 的成本，防止 Pac-Man 誤吃能量球。
     - **能量球避免懲罰**：如果目標是可食用鬼魂，靠近能量球的格子會加 100 的成本，避免吃能量球（因為吃了能量球會重置鬼魂狀態）。
     - **分數球獎勵**：如果路過分數球，成本會減少 0.9，鼓勵 Pac-Man 順路吃分數球（但只在追鬼魂、逃跑或無目標時）。
   - **H 成本（啟發式）**：從當前格子到目標的估計距離，用「歐幾里得距離」（直線距離）計算：`√((x2 - x1)² + (y2 - y1)²)`。
   - **F 成本**：F = G + H，總成本越低的格子越優先探索。

3. **探索過程**：
   - A* 算法從起點開始，檢查四周的四個格子（上下左右）。
   - 計算每個格子的 F 成本，挑 F 成本最低的格子繼續探索。
   - 記錄每個格子的「來源」（從哪個格子來的），這樣可以回溯出完整路徑。
   - 如果遇到牆壁、邊界、門或鬼魂重生點，這些格子不能走。
   - 重複這個過程，直到找到目標或探索完所有可達的格子。

4. **鬼魂威脅的特殊處理**：
   - 程式會預測鬼魂的下一步位置（根據鬼魂與 Pac-Man 的相對位置，假設鬼魂會朝 Pac-Man 靠近）。
   - 預測位置的格子會加 2000 的成本，強烈避免 Pac-Man 走過去。
   - 鬼魂附近的格子（根據距離計算威脅半徑，最大 3 格）也會增加成本，半徑內的格子都被視為「危險區」。

5. **逃跑模式的特殊邏輯**：
   - 如果行為樹選擇「逃跑」，目標不是固定的點，而是動態選擇一個「最安全」的格子。
   - 程式會在迷宮的一個範圍內（半徑為迷宮尺寸的一半）搜尋所有可走的格子，挑選離最近危險鬼魂最遠的格子作為目標。
   - 然後用 A* 算法找到到這個安全點的路徑。

6. **備用方案**：
   - 如果 A* 算法找不到路徑（例如目標被堵住），Pac-Man 會隨機選一個安全方向（不會撞牆、邊界、門或鬼魂重生點）移動。

**簡單比喻**：A* 算法像你在迷宮裡找朋友，你會挑最近的路，但如果某條路有怪獸（鬼魂），你會繞遠一點。如果你在逃跑，A* 會幫你找一個怪獸最遠的角落，然後帶你過去。

---

### A* 算法的關鍵特點

- **高效性**：A\* 通過啟發式（H 成本）優先探索接近目標的格子，減少計算量。
- **安全性**：鬼魂威脅成本讓 Pac-Man 避開危險區域，增加生存率。
- **靈活性**：根據目標類型（分數球、能量球、可食用鬼魂）調整成本，確保行為符合策略。
- **順路優化**：分數球獎勵讓 Pac-Man 在追其他目標時也能順便吃分數球，提高效率。

---

## 行為樹與 A* 算法的配合

行為樹和 A* 算法是 Pac-Man AI 的兩個核心部分，它們分工合作：
- **行為樹**決定「做什麼」（例如追能量球還是逃跑）。
- **A\* 算法**決定「怎麼做」（具體走哪條路）。

例如：
1. 行為樹檢查到鬼魂在 1 格內，決定「逃跑」。
2. A* 算法找到一個遠離鬼魂的安全點，計算出到那裡的最佳路徑，返回第一步的方向（例如「向上」）。
3. Pac-Man 朝這個方向移動，然後下一幀重新運行行為樹，檢查是否需要改變策略。

**簡單比喻**：行為樹是 Pac-Man 的「大腦」，決定是去找蘋果還是躲狗；A* 算法是它的「導航儀」，告訴它怎麼走才能又快又安全。

---

## 為什麼用行為樹和 A* 算法？

- **行為樹**：
  - 結構清晰，像流程圖一樣容易理解和修改。
  - 能按優先級組織複雜的決策，模擬人類玩家的思考（先躲危險，再找機會）。
  - 每個節點獨立，方便添加新策略（例如未來加入「收集特殊道具」）。

- **A* 算法**：
  - 保證找到最優路徑（如果存在）。
  - 能靈活應對鬼魂的動態威脅，通過成本調整避開危險。
  - 支援多種目標類型，適應不同的遊戲情境（追逐、逃跑、收集）。

這種組合讓 Pac-Man 的 AI 既聰明又高效，模擬了一個「有策略」的玩家行為。

---

## 總結

Pac-Man 的 AI 通過**行為樹**和 **A* 路徑尋找算法**實現了智能的決策和移動：
- **行為樹**像一個決策清單，按優先級檢查六種策略：
  1. 鬼魂太近 → 逃跑。
  2. 鬼魂在附近且有能量球 → 追能量球。
  3. 遊戲末尾 → 優先能量球或分數球。
  4. 有可食用鬼魂 → 追鬼魂。
  5. 有分數球 → 追分數球。
  6. 卡住 → 隨機移動。
- **A\* 算法**像一個導航系統，計算最佳路徑，考慮：
  - 最短距離（歐幾里得距離）。
  - 鬼魂威脅（避開危險區）。
  - 能量球和分數球的優先級（根據目標調整成本）。
  - 順路吃分數球的機會。

這兩個機制的配合讓 Pac-Man 能在迷宮中靈活應對鬼魂的威脅，高效收集分數球和能量球，同時保持遊戲的挑戰性和趣味性。

**最終比喻**：Pac-Man 像一個聰明的探險家，拿著一份「任務清單」（行為樹），按重要性決定是躲怪獸、找寶藏還是搶道具，然後用一個超級導航儀（A* 算法）規劃路線，確保又快又安全地完成任務！