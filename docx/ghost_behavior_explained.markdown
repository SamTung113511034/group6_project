# Pac-Man 鬼魂行為機制詳解

## 什麼是 Pac-Man 的鬼魂？

在《Pac-Man》遊戲中，鬼魂是追逐 Pac-Man 的敵人。它們在迷宮中移動，試圖抓住 Pac-Man，讓他損失生命。遊戲中有四種鬼魂（Ghost1、Ghost2、Ghost3、Ghost4），每種鬼魂有自己的顏色和行為策略，讓遊戲更具挑戰性和變化性。鬼魂的行為由一個通用框架控制，但每個鬼魂有獨特的「個性」，就像一個團隊裡的成員各司其職。

**簡單比喻**：想像鬼魂是公園裡追你的四隻狗，每隻狗有不同的顏色（紅、粉紅、橘、淺藍），而且追你的方式不一樣：有的直接衝向你，有的繞到你前面堵路，有的設陷阱，有的到處搗亂。

---

## 鬼魂的狀態

鬼魂有四種狀態，決定它們的行為和移動方式：

1. **正常狀態（追逐）**：
   - 鬼魂積極追逐 Pac-Man，根據各自的策略選擇目標。
   - 這是鬼魂的預設狀態，速度為正常速度（由 `GHOST_DEFAULT_SPEED` 設定，子類可能有不同速度）。
   - **比喻**：狗正常地追著你跑，試圖抓住你。

2. **可食用狀態（Edible）**：
   - 當 Pac-Man 吃到能量球（Power Pellet）時，所有鬼魂變成可食用狀態，持續一段時間（由 `duration` 決定，通常是幾秒）。
   - 在這個狀態下，鬼魂會試圖逃離 Pac-Man，因為被 Pac-Man 碰到會被「吃掉」。
   - 速度可能降低（取決於遊戲設置），外觀也會改變（通常變成藍色，閃爍）。
   - **比喻**：你拿了根棍子，狗害怕了，開始四處跑躲你。

3. **返回重生點（Returning to Spawn）**：
   - 如果鬼魂被 Pac-Man 吃掉，它會進入這個狀態，快速返回迷宮中的「重生點」（標記為 'S' 的格子，通常在迷宮中央）。
   - 移動速度變為較快的 `GHOST_RETURN_SPEED`，以盡快到達重生點。
   - **比喻**：狗被你打跑了，飛快跑回自己的狗窩。

4. **等待狀態（Waiting）**：
   - 鬼魂到達重生點後，會進入等待狀態，停留一段時間（由 `GHOST_WAIT_TIME` 和死亡次數決定）。
   - 等待時間隨死亡次數減少（公式：`wait_time = GHOST_WAIT_TIME / max(1, death_count * 1.5)`）。
   - 等待結束後，鬼魂恢復正常狀態，速度根據死亡次數增加（`speed = default_speed * (1.1 ^ death_count)`，但不超過 Pac-Man 的速度）。
   - **比喻**：狗回到狗窩後休息一會兒，然後變得更兇（速度更快）又出來追你。

**為什麼有這些狀態？**  
這些狀態讓鬼魂的行為多樣化，增加遊戲的動態性。正常狀態讓鬼魂具威脅性，可食用狀態給玩家反擊的機會，返回重生點和等待狀態則確保鬼魂不會永久消失，讓遊戲保持挑戰。

---

## 鬼魂的移動邏輯

鬼魂的移動由 `move` 方法控制，根據當前狀態執行不同的行為：

1. **等待狀態**：
   - 鬼魂停在原地，減少等待計時器（`wait_timer`）。
   - 當計時器到 0，鬼魂結束等待，進入正常狀態，速度根據死亡次數增加。
   - **比喻**：狗在狗窩裡休息，數到 10 後跳出來繼續追你。

2. **可食用狀態**：
   - 鬼魂執行 `escape_from_pacman` 方法，試圖遠離 Pac-Man。
   - 減少可食用計時器（`edible_timer`），當計時器到 0，鬼魂恢復正常狀態。
   - **比喻**：狗害怕你手裡的棍子，跑得遠遠的，等棍子失效（時間到）再回來追你。

3. **返回重生點**：
   - 鬼魂執行 `return_to_spawn` 方法，快速移動到最近的重生點（'S' 格子）。
   - 使用 `bfs_path`（廣度優先搜尋，BFS）找到最短路徑。
   - 到達重生點後，進入等待狀態。
   - **比喻**：狗被打跑後，飛快跑回狗窩，然後開始休息。

4. **正常狀態**：
   - 鬼魂執行 `chase_pacman` 方法，根據子類的具體策略追逐 Pac-Man。
   - 每個鬼魂有自己的追逐方式（後面詳述）。
   - **比喻**：狗用自己的方式（直接追、繞路、設陷阱等）來抓你。

鬼魂的移動使用 **BFS 算法**（廣度優先搜尋）來計算路徑，確保找到最短的有效路徑。BFS 會檢查四個方向（上、下、左、右），選擇可通行的格子（例如路徑、門、能量球或重生點格子）。如果沒有直接路徑，鬼魂會嘗試移動到附近的可通行點，或者隨機移動。

**簡單比喻**：鬼魂像在迷宮裡找你的導航員，BFS 是它們的「地圖」，幫它們找到最近的路。如果路被堵，它們會試著繞到旁邊，或者隨便走一步試試看。

---

## BFS 路徑尋找機制

**廣度優先搜尋（BFS）**是鬼魂用來找路的「大腦」，確保它們能有效移動到目標點。以下是它的簡單工作原理：

1. **起點和終點**：
   - 起點是鬼魂當前位置 `(x, y)`。
   - 終點是根據鬼魂策略決定的目標，例如 Pac-Man 的位置、包抄點或重生點。

2. **探索過程**：
   - 從起點開始，檢查四周的四個格子（上、下、左、右）。
   - 只考慮可通行的格子（路徑、門、能量球、重生點）。
   - 用一個「隊列」（像排隊的清單）記錄要檢查的格子和走過的路徑。
   - 每次從隊列取出一個格子，檢查它的四周，記錄新格子，直到找到目標或檢查完所有格子。

3. **避免反覆移動**：
   - 鬼魂記錄上一步的位置（`last_x, last_y`），90% 的概率避免走回頭路，防止在兩個格子間來回抖動。
   - **比喻**：狗不會一直來回跑同樣的兩步，它會試著走新路。

4. **備用方案**：
   - 如果找不到目標，BFS 會選一個附近的可通行點作為新目標。
   - 如果還是沒路，鬼魂會隨機選一個可走的方向（`move_random`）。

**為什麼用 BFS？**  
BFS 保證找到最短路徑，計算簡單，適合迷宮這種格子結構。比起 Pac-Man 用的 A* 算法，BFS 不考慮「距離目標有多近」，只管找最短的路，這讓鬼魂的移動更直接但略顯「機械」。

**簡單比喻**：BFS 像你按順序檢查迷宮裡的每條路，先走近的路，再走遠的，直到找到目標。如果目標被堵，找個旁邊的路口試試，或者隨便走一步。

---

## 四種鬼魂的獨特策略

四種鬼魂（Ghost1、Ghost2、Ghost3、Ghost4）有不同的顏色和追逐策略，模擬一個協同的「獵人團隊」。以下是它們的行為詳解：

### Ghost1（紅色鬼魂，領頭追逐者）
- **顏色**：紅色
- **速度**：`GHOST1_SPEED`
- **策略**：直接追逐 Pac-Man，預測 Pac-Man 的下一步位置。
- **怎麼做**：
  - 追逐 Pac-Man 的目標位置（`pacman.target_x, pacman.target_y`），而不是當前位置，模擬「預判」。
  - 如果找不到路，追逐記憶中的 Pac-Man 位置（`memory_x, memory_y`）。
  - 如果有其他鬼魂，會通知最近的鬼魂去「包抄」，增加圍堵效果。
  - 在可食用狀態下，Ghost1 不逃跑，而是繼續追逐，模擬「快速被吃」以重新進入正常狀態。
- **比喻**：這隻紅狗是領頭的，總是直衝你跑，還會猜你下一步往哪跑。如果它害怕了（可食用），它還是硬著頭皮追你，想早點恢復兇猛。
- **為什麼這樣設計？**：Ghost1 是最直接的威脅，讓玩家感到壓力，同時領導其他鬼魂的行動。

### Ghost2（粉紅色鬼魂，側翼包抄者）
- **顏色**：粉紅色
- **速度**：`GHOST2_SPEED`
- **策略**：與 Ghost1 協作，試圖繞到 Pac-Man 前面堵截。
- **怎麼做**：
  - 如果離 Pac-Man 很近（距離 ≤ 4 格），直接追逐 Pac-Man 的目標位置。
  - 否則，計算一個「包抄點」，公式是：`target_x = pacman.x + (pacman.x - ghost1.x) * 2`，試圖跑到 Pac-Man 的對稱位置，堵住逃跑路線。
  - 如果包抄點不可行，選擇 Pac-Man 附近的關鍵路口（可通行格子）作為目標。
  - 如果都失敗，隨機移動。
- **比喻**：粉紅狗像個狡猾的幫手，看到領頭紅狗在你左邊，它就跑去你右邊堵你，或者守住你可能跑去的小路。
- **為什麼這樣設計？**：Ghost2 增加包圍感，讓玩家不能只專注躲避 Ghost1，必須考慮多方向的威脅。

### Ghost3（橘色鬼魂，圍堵者）
- **顏色**：橘色
- **速度**：`GHOST3_SPEED`
- **策略**：與 Ghost1 和 Ghost2 協作，設置陷阱堵住 Pac-Man 的逃跑路徑。
- **怎麼做**：
  - 預測 Pac-Man 的移動方向（根據 `pacman.target_x, pacman.target_y`）。
  - 計算 Pac-Man 和 Ghost1 的中點，然後沿 Pac-Man 移動方向延長 4 格作為目標：`target_x = (pacman.x + ghost1.x) // 2 + dx * 4`。
  - 如果目標太近（距離 Pac-Man < 6 格），選擇附近的「路口」（有超過兩個可通行方向的格子）作為陷阱點。
  - 如果都失敗，隨機移動。
- **比喻**：橘色狗像個設陷阱的獵人，猜你會往哪跑，然後跑到半路或路口等你，試圖把你逼進死角。
- **為什麼這樣設計？**：Ghost3 的陷阱策略讓玩家需要更謹慎地規劃路線，增加遊戲的策略性。

### Ghost4（淺藍色鬼魂，攪亂者）
- **顏色**：淺藍色
- **速度**：`GHOST4_SPEED`
- **策略**：隨機搗亂，時而追逐 Pac-Man，時而堵住路口。
- **怎麼做**：
  - 如果離 Pac-Man 近（距離 < 6 格），隨機選擇附近的路口（有超過一個可通行方向的格子）堵住。
  - 否則，預測 Pac-Man 未來 2 步的位置（`pacman.x + dx * 2`），追逐這個位置。
  - 如果追不到，嘗試直接追 Pac-Man 的當前位置。
  - 如果都失敗，隨機移動。
- **比喻**：淺藍狗是個搗蛋鬼，有時追你，有時跑去路口搗亂，讓你摸不清它的規律。
- **為什麼這樣設計？**：Ghost4 的隨機性讓遊戲更不可預測，防止玩家輕易掌握所有鬼魂的行動模式。

**為什麼四種鬼魂有不同策略？**  
這些策略模擬了一個「獵人團隊」：Ghost1 帶頭衝鋒，Ghost2 繞路包抄，Ghost3 設陷阱，Ghost4 製造混亂。這種協作讓鬼魂的威脅更有層次，玩家需要同時應對直接追逐、包圍和隨機干擾。

---

## 可食用狀態的逃跑邏輯

當鬼魂進入可食用狀態（`edible = True`），它們會執行 `escape_from_pacman` 方法，試圖遠離 Pac-Man。以下是逃跑邏輯的細節：

1. **預測 Pac-Man 位置**：
   - 根據 Pac-Man 的目標方向（`target_x, target_y`），預測它未來 2 格的位置。
   - 例如，如果 Pac-Man 正在向右移動，預測位置是 `(pacman.x + 2, pacman.y)`。

2. **選擇最佳方向**：
   - 檢查四個方向（上、下、左、右），計算每個方向的「評分」：
     - **距離分數**：與 Pac-Man 預測位置的曼哈頓距離（`abs(x2 - x1) + abs(y2 - y1)`），越遠越好。
     - **連通性分數**：新位置的可通行方向數（越多越好，乘以 2 作為加權）。
     - 總分 = 距離 + 連通性 * 2。
   - 選擇評分最高的方向，優先通往「路口」（連通性高的格子），因為路口提供更多逃跑選項。

3. **避免反覆移動**：
   - 90% 的概率避免走回上一步的位置，防止鬼魂來回抖動。

4. **備用方案**：
   - 如果沒有有效方向，隨機選擇一個可通行方向（`move_random`）。

**例外**：Ghost1 在可食用狀態下不逃跑，而是繼續追逐 Pac-Man，模擬「快速被吃」以重新進入正常狀態，增加遊戲壓力。

**簡單比喻**：大多數鬼魂（除了紅狗）看到你拿棍子就跑，會挑離你最遠的路，尤其是能通很多方向的路口。如果跑不了，它們就隨機跑一條路試試看。

---

## 返回重生點和等待邏輯

當鬼魂被 Pac-Man 吃掉（在可食用狀態下），它會進入返回重生點狀態，然後進入等待狀態：

1. **返回重生點**：
   - 鬼魂速度設為 `GHOST_RETURN_SPEED`（較快）。
   - 使用 BFS 找到最近的重生點（'S' 格子）。
   - 如果找不到路，隨機移動。
   - 到達重生點後，進入等待狀態。
   - **比喻**：狗被你打跑，飛快跑回狗窩。

2. **等待狀態**：
   - 鬼魂停在重生點，等待一段時間（根據死亡次數計算，第一次較長，後面越來越短）。
   - 等待結束後，速度增加（`1.1 ^ death_count` 倍），然後恢復正常狀態。
   - **比喻**：狗在狗窩休息，休息時間越來越短，然後更兇地跑出來追你。

---

## 隨機移動邏輯

當鬼魂找不到有效路徑（例如目標被堵住），它們會執行 `move_random` 方法：
- 隨機選擇四個方向（上、下、左、右）之一。
- 只選可通行的格子（路徑、門、能量球、重生點）。
- 90% 的概率避免走回上一步位置。
- **比喻**：狗不知道往哪跑，就隨便挑條路，但不會傻乎乎地來回跑。

---

## 總結

Pac-Man 的鬼魂通過一個靈活的框架實現了多樣化的行為：
- **狀態**：鬼魂有正常、可食用、返回重生點和等待四種狀態，模擬追逐、逃跑和恢復的循環。
- **移動邏輯**：
  - 正常狀態：根據子類策略追逐 Pac-Man。
  - 可食用狀態：大多數鬼魂逃離 Pac-Man，優先選擇遠離且連通性高的路徑（Ghost1 例外）。
  - 返回重生點：快速返回重生點，然後進入等待。
  - 等待狀態：休息一段時間後恢復，速度隨死亡次數增加。
- **路徑尋找**：使用 BFS 算法找到最短路徑，保證有效移動，隨機移動作為備用方案。
- **四種鬼魂**：
  - **Ghost1（紅色）**：領頭追逐，預測 Pac-Man 位置，協調其他鬼魂。
  - **Ghost2（粉紅色）**：側翼包抄，繞到 Pac-Man 對面堵路。
  - **Ghost3（橘色）**：設陷阱，守住路口或 Pac-Man 可能的逃跑路線。
  - **Ghost4（淺藍色）**：隨機搗亂，時而追逐，時而堵路口。

這些機制的結合讓鬼魂形成一個協同的「獵人團隊」，既有直接威脅（Ghost1），又有策略包圍（Ghost2、Ghost3）和隨機干擾（Ghost4），讓玩家需要靈活應對，增加遊戲的挑戰性和趣味性。

**最終比喻**：鬼魂像四隻不同性格的狗在公園追你：紅狗帶頭衝，粉紅狗繞路堵，青色狗設陷阱，淺藍狗到處搗亂。你得機靈地躲，還要趁機拿棍子（能量球）反擊，讓它們跑回狗窩！